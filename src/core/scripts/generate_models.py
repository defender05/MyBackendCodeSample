from collections import defaultdict
from typing import Any

from mako.lookup import TemplateLookup
from mako.template import Template
import sqlalchemy as sa
from sqlalchemy import inspect
from settings import get_settings

cfg = get_settings()

engine = sa.create_engine(cfg.sync_db_url)
inspector = inspect(engine)


# Функция для подавления лишних переносов строк
def escape_extra_newlines(text):
    patterns = ['<%block', '<%include']  # Шаблоны, которые нужно обработать
    results = []
    for line in text.splitlines():
        if any(line.startswith(p) for p in patterns):
            line += '\\'  # Добавляем обратный слэш для подавления переноса строки
        results.append(line)
    return '\n'.join(results)


# Настройка TemplateLookup
lookup = TemplateLookup(
    directories=['src/core/mako_templates'],  # Путь к вашим шаблонам
    preprocessor=escape_extra_newlines,       # Применяем препроцессор
    default_filters=['str', 'trim'],          # Фильтры для очистки вывода
)


def get_tables(schema: str = 'public') -> list | None:
    local_tables = []

    for table_name in inspector.get_table_names(schema=schema):
        # print('table_name:', table_name)
        columns = []

        foreign_keys = inspector.get_foreign_keys(table_name=table_name, schema=schema)

        hashed_foreign_keys = {item["constrained_columns"][0]: item for item in foreign_keys}
        # [print('foreign_key:',  key) for key in foreign_keys]

        for column in inspector.get_columns(table_name=table_name, schema=schema):
            fk = hashed_foreign_keys[column.get('name')] if column.get('name') in hashed_foreign_keys else None
            fk_options = fk.get('options') if fk else None
            primary_key = 'primary_key=True' if column.get('name') == 'id' else ''
            autoincrement = 'autoincrement=True' if column['autoincrement'] and column['autoincrement'] == True else ''
            nullable = f"nullable={str(column.get('nullable', 'True'))}"
            args = [arg for arg in [primary_key, autoincrement, nullable] if arg is not None and arg != '']
            foreign_key_code = f"ForeignKey(column='{fk['referred_table']}.{fk['referred_columns'][0]}', onupdate='{fk_options.get('onupdate', 'NO ACTION')}', ondelete='{fk_options.get('ondelete', 'NO ACTION')}'), " if fk else ''
            column_info = {
                'name': column['name'],
                'type': column['type'].python_type.__name__,
                'args': f" {', '.join(args)}",
                'foreign_key': foreign_key_code,
            }
            columns.append(column_info)

        capitalized_words = [word.capitalize() for word in table_name.split('_')]

        local_tables.append({
            'name': table_name,
            'class_name': f"{''.join(capitalized_words)}Model",
            'columns': columns,
            'relationships': []  # Здесь можно добавить логику для relationships
        })

    return local_tables


if __name__ == "__main__":
    # Сбор информации о таблицах
    tables = get_tables()
    [print('table:',  table) for table in tables]

    # Генерация кода
    template = lookup.get_template('model_template.py.mako')  # Загружаем шаблон через lookup
    generated_code = template.render(tables=tables)  # Рендерим шаблон

    # Сохранение в файл
    with open('src/core/autogenerated_models.py', 'w') as f:
        f.write(generated_code)